on:
    workflow_call:
      inputs:
        runner:
          description: "GitHub Runner that runs the task"
          type: string
          required: false
          default: "amd64-mo-shanghai-dind"
        time-out:
          description: "GitHub Runner TimeOut"
          type: number
          required: false
          default: 20
        repo:
          description: "The repository where the deployment file is located"
          type: string
          required: true
          default: "matrixorigin/matrixone"
        ref:
          description: "The branch (or commit) where the deployment file is located"
          type: string
          required: true
          default: "main"
        dockerfile-path:
          description: "The path where the deployment file is located"
          type: string
          required: true
          default: "optools/images/Dockerfile"
        registry:
          description: "The image registry of the stored mo"
          type: string
          required: true
          default: "ccr.ccs.tencentyun.com"
        image-repo:
          description: "The image registry of the stored mo"
          type: string
          required: true
          default: "matrixone-dev/matrixone"
        platform:
          description: "The image platform of mo image"
          type: string
          required: true
          default: "linux/amd64,linux/arm64"
        
      secrets:
        REGISTRY_USERNAME:
          description: "REGISTRY_USERNAME"
          required: true
        REGISTRY_PASSWORD:
          description: "REGISTRY_PASSWORD"
          required: true
      outputs:
        version:
          description: "mo image tag"
          value: ${{ jobs.docker_image_build.outputs.version }}
        commit_id:
          description: "mo short commit id"
          value: ${{ jobs.docker_image_build.outputs.commit_id }}
        commit_id_long:
            description: "mo full commit id"
            value: ${{ jobs.docker_image_build.outputs.commit_id_long }}
  
jobs:
  docker_image_build:
    runs-on: ${{ inputs.runner }}
    timeout-minutes: ${{ inputs.time-out }}
    name: BUILD MO DOCKER IMAGE
    outputs:
      version: ${{ steps.prep.outputs.version }}
      commit_id: ${{ steps.prep.outputs.commit_id }}
      commit_id_long: ${{ steps.prep.outputs.commit_id_long }}
    steps:
      - name: Clone Repo ${{ inputs.repo }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
      - name: Prepare
        id: prep
        run: |
          LAST_COMMIT_ID_LONG=$(git log -1 --format='%H')
          LAST_COMMIT_ID=$(git rev-parse --short HEAD)

          VERSION="commit-${LAST_COMMIT_ID}"
          TAGS="${{ inputs.registry }}/${{ inputs.image-repo }}:${VERSION}"
          
          # Set output parameters.
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT;
          echo "version=${VERSION}" >> $GITHUB_OUTPUT;
          echo "commit_id=${LAST_COMMIT_ID}" >> $GITHUB_OUTPUT;
          echo "commit_id_long=${commit_id_long}" >> $GITHUB_OUTPUT;
          
          echo "httpsproxy=${https_proxy}" >> $GITHUB_OUTPUT;
          echo "httpproxy=${http_proxy}" >> $GITHUB_OUTPUT;
          echo "noproxy=${no_proxy}" >> $GITHUB_OUTPUT;

          sed -i 's#^RUN apt-get update#RUN sed -i "s?http.*ubuntu\.com?http://mirrors\.ustc\.edu\.cn?g" /etc/apt/sources.list  \&\& apt-get clean all \&\& apt-get update#g' ${{ inputs.dockerfile-path }}
          
          sed -i 's#FROM ubuntu:22.04#FROM ccr.ccs.tencentyun.com/mo-infra/ubuntu:22.04#g' ${{ inputs.dockerfile-path }}

          # adjust for go 1.21.5
          sed -i 's#FROM golang:1.21.5-bookworm#FROM ccr.ccs.tencentyun.com/cicd-runner/golang:1.21.5-bookworm#g' ${{ inputs.dockerfile-path }}

          # adjust for go 1.22.3
          sed -i 's#FROM golang:1.22.3-bookworm#FROM ccr.ccs.tencentyun.com/mo-infra/golang:1.22.3-bookworm#g' ${{ inputs.dockerfile-path }}

          # adjust for go 1.23.0
          sed -i 's#FROM golang:1.23.0-bookworm#FROM ccr.ccs.tencentyun.com/mo-infra/golang:1.23.0-bookworm#g' ${{ inputs.dockerfile-path }}

      - name: Show Image Info
        run: |
          echo image-tags: ${{ steps.prep.outputs.tags }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: ${{ inputs.runner == 'ubuntu-latest' && 'tonistiigi/binfmt:latest' || 'shanghai.idc.matrixorigin.cn:30019/public/binfmt:latest' }}
          platforms:  ${{ inputs.platform }}

      - name: Set up Docker Buildx
        id: buildx
        uses:  docker/setup-buildx-action@v3
        with:
          platforms: ${{ inputs.platform }}
          driver-opts: |
            image=${{ inputs.runner == 'ubuntu-latest' && 'moby/buildkit:buildx-stable-1' || 'shanghai.idc.matrixorigin.cn:30019/public/buildkit:buildx-stable-1' }}
            env.http_proxy=${{ steps.prep.outputs.httpsproxy }}
            env.https_proxy=${{ steps.prep.outputs.httpproxy }}
            "env.no_proxy=${{ steps.prep.outputs.noproxy }}"

      - name: Login to Image Resistry
        id: login_registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.platform }}
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            https_proxy=${{ steps.prep.outputs.httpsproxy }}
            http_proxy=${{ steps.prep.outputs.httpproxy }}
            no_proxy=${{ steps.prep.outputs.noproxy }}
            GOPROXY=${{ inputs.runner == 'ubuntu-latest' && 'https://proxy.golang.org,direct' || 'http://goproxy.goproxy.svc.cluster.local,https://goproxy.cn,direct' }}
