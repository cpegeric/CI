on:
  workflow_call:
    inputs:
      runner:
        description: "GitHub Runner that runs the task"
        type: string
        required: false
        default: "amd64-mo-guangzhou-medium8"
      time-out:
        description: "GitHub Runner TimeOut"
        type: number
        required: false
        default: 30
      namespace:
        description: "The namespace of mo deployed in the cluster"
        type: string
        required: true
        default: ""
      repo:
        description: "The repository where the deployment file is located"
        type: string
        required: true
        default: "matrixorigin/matrixone"
      ref:
        description: "The branch (or commit) where the deployment file is located"
        type: string
        required: true
        default: "main"
      depoy-file-path:
        description: "The path where the deployment file is located"
        type: string
        required: true
        default: "optools/mo_checkin_regression/mo_checkin_regression_tke.yaml"
      image-tag:
        description: "The image tag of the deployed mo"
        type: string
        required: true
        default: ""
      registry:
        description: "The image registry of the deployed mo"
        type: string
        required: true
        default: "ccr.ccs.tencentyun.com"
      oss-endpoint:
        description: "Endpoint to access object storage"
        type: string
        required: true
        default: "https://cos.ap-guangzhou.myqcloud.com"
      oss-region:
        description: "oss region"
        type: string
        required: true
        default: "ap-guangzhou"
      oss-bucket-path:
        description: "Bucket and path for storing mo shared data"
        type: string
        required: true
        default: ""
      prepare-bvt-data:
        description: "Prepare bvt test needed data"
        type: boolean
        required: true
        default: true
      enable-txn-check:
        description: "Enable mo txn check"
        type: boolean
        required: true
        default: false
      
    secrets:
      REGISTRY_USERNAME:
        description: "REGISTRY_USERNAME"
        required: true
      REGISTRY_PASSWORD:
        description: "REGISTRY_PASSWORD"
        required: true
      OSS_ACCESS_KEY:
        description: "OSS_ACCESS_KEY"
        required: true
      OSS_SECRET_KEY:
        description: "OSS_SECRET_KEY"
        required: true
    outputs:
      mo_svc_ip:
        description: "MatrixOne Service IP"
        value: ${{ jobs.setup_mo_test_env.outputs.mo_svc_ip }}
      cn_ips:
        description: ""
        value: ${{ jobs.setup_mo_test_env.outputs.cn_ips }}
      cn_ips_json:
        description: ""
        value: ${{ jobs.setup_mo_test_env.outputs.cn_ips_json }}

jobs:
  setup_mo_test_env:
    runs-on: ${{ inputs.runner }}
    timeout-minutes: ${{ inputs.time-out }}
    name: SETUP MO TEST ENV
    outputs:
      mo_svc_ip: ${{ steps.get_mo_addr.outputs.mo_svc_ip }}
      cn_ips: ${{ steps.get_mo_addr.outputs.cn_ips }}
      cn_ips_json: ${{ steps.get_mo_addr.outputs.cn_ips_json }}
    steps:
      - name: Clone Repo ${{ inputs.repo }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          fetch-depth: 1
          path: ./matrixone
      - name: Clean TKE ENV
        run: |
          if [ "$(kubectl -n ${{ inputs.namespace }} get mo | grep -c "mo-checkin-regression")" -ne 0 ];then 
            kubectl get matrixonecluster -n ${{ inputs.namespace }} | awk 'NR>1{system("kubectl delete  matrixonecluster -n ${{ inputs.namespace }} "$1)}'
            sleep 60s;
          fi
          kubectl get bucket -n ${{ inputs.namespace }} | grep bucket | awk '{system("kubectl delete bucket/"$1" -n ${{ inputs.namespace }}")}';
          kubectl delete ns ${{ inputs.namespace }} || exit 0;
      - name: Prepare Namespace and Secrets
        id: prepare
        run: |
          # set docker login info
          DOCKER_REGISTRY_SERVER=${{ inputs.registry }}
          DOCKER_USER=${{ secrets.REGISTRY_USERNAME }}
          DOCKER_PASSWORD=${{ secrets.REGISTRY_PASSWORD }}
  
          kubectl create namespace ${{ inputs.namespace }};
          kubectl -n ${{ inputs.namespace }} create secret generic tencent-token --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.OSS_SECRET_KEY }};
          kubectl -n ${{ inputs.namespace }} create secret docker-registry tke-registry --docker-server=$DOCKER_REGISTRY_SERVER --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASSWORD;      
  
          # export https_proxy and http_proxy
          echo "https_proxy=${https_proxy}" >> ${GITHUB_OUTPUT};
          echo "http_proxy=${http_proxy}" >> ${GITHUB_OUTPUT};
          echo "no_proxy=${no_proxy}" >> ${GITHUB_OUTPUT};
  
      - name: ECHO mo-checkin-regression.yaml
        run: |
          cd $GITHUB_WORKSPACE/matrixone
  
          file="$GITHUB_WORKSPACE/matrixone/${{ inputs.depoy-file-path }}";
  
          sed -i 's/nsformocheckin/${{ inputs.namespace }}/g' "${file}"
          sed -i 's/s3pathformocheckin/${{ inputs.oss-bucket-path }}/g' "${file}"
          sed -i 's/regionformocheckin/${{ inputs.oss-region }}/g' "${file}"
          sed -i 's@endpointformocheckin@${{ inputs.oss-endpoint }}@g' "${file}"
          sed -i "s/imagetag/${{ inputs.image-tag }}/g" "${file}"
          
          cat "${file}";
      - name: Create MO Cluster
        run: |
          kubectl create cm -n ${{ inputs.namespace }} proxy-env --from-literal=https_proxy="${https_proxy}" --from-literal=http_proxy="${http_proxy}" --from-literal=no_proxy="${no_proxy}";
          kubectl -n ${{ inputs.namespace }} apply -f "$GITHUB_WORKSPACE/matrixone/${{ inputs.depoy-file-path }}";
          sleep 100s
          while true; do
            if [ "$(kubectl get mo -n ${{ inputs.namespace }} | grep ${{ inputs.image-tag }} | grep -iv NotReady | grep -ic Ready )" -eq 0 ]; then
              kubectl get mo -n ${{ inputs.namespace }};
              sleep 15s;
              continue;
            else
              break;
            fi
          done
          kubectl -n ${{ inputs.namespace }} get pod -owide
  
      - name: Get MO Cluster Addr
        id: get_mo_addr
        timeout-minutes: 2
        run: |
          mo_svc_ip=$(kubectl -n ${{ inputs.namespace }} get svc | grep "proxy" | grep "6001/TCP"|awk '{print $3}')
          if [ -z "$mo_svc_ip" ]; then
          echo "mo_svc_ip use proxy module failed, starting use cn_svc_ip"
          mo_svc_ip=$(kubectl -n ${{ inputs.namespace }} get svc | grep "cn" | grep "6001/TCP" | awk '{print $3}')
          fi

          echo mo_svc_ip=$mo_svc_ip
          echo "mo_svc_ip=${mo_svc_ip}" >> $GITHUB_OUTPUT

          cn_ips=$(kubectl -n ${{ inputs.namespace }} get pods -l matrixorigin.io/component=CNSet -o=jsonpath='{.items[*].status.podIP}' | sed 's/ /,/g')
          echo "cn_ips is ${cn_ips}"
          echo "cn_ips=$cn_ips" >> $GITHUB_OUTPUT;

          cn_ips_json=$(kubectl -n ${{ inputs.namespace }} get pods -l matrixorigin.io/component=CNSet -l matrixorigin.io/component=CNSet -o=json | jq -c '[.items[].status.podIP]')
          echo "cn_ips_json is ${cn_ips_json}"
          echo "cn_ips_json=${cn_ips_json}" >> $GITHUB_OUTPUT;
      - name: Add TXN Filter
        if: ${{ inputs.enable-txn-check }}
        run: |
          export MYSQL_PWD=111;
          for i in {1..300}; do
            if mysql -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -P 6001 -u dump -e "select mo_ctl('cn', 'txn-trace', 'add-txn user dump');select mo_ctl('cn', 'txn-trace', 'add-txn user admin');select mo_ctl('cn', 'txn-trace', 'add-txn connection sql-executor,0');select mo_ctl('cn', 'txn-trace', 'enable txn');select mo_ctl('cn', 'txn-trace', 'enable data');select mo_ctl('cn', 'txn-trace', 'enable txn-action');select mo_ctl('cn', 'txn-trace', 'add-statement cost 10s');"; then
              break;
            fi
          sleep 1;
          done
      - name: Prepare BVT Data in Pod
        if: ${{ inputs.prepare-bvt-data }}
        timeout-minutes: 5
        run: |
          pods=($(kubectl -n ${{ inputs.namespace }} get pods -l matrixorigin.io/component=CNSet -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'));
          for pod in "${pods[@]}"; do 
            kubectl exec -it ${pod} -n ${{ inputs.namespace }} -- bash -c '
              set -x;
  
              export https_proxy="${{ steps.prepare.outputs.https_proxy }}";
              export http_proxy="${{ steps.prepare.outputs.http_proxy }}";
              export no_proxy="${{ steps.prepare.outputs.no_proxy }}";
  
              git config --global init.defaultBranch main
              success="no"
              path_matrixone=$(pwd);
              for i in {1..5}; do
                rm -rf $path_matrixone/matrixone;
                mkdir $path_matrixone/matrixone;
                git config --global --add safe.directory $path_matrixone/matrixone;
                cd $path_matrixone/matrixone && git init;
                git remote add origin https://github.com/matrixorigin/matrixone.git;
                git config --local gc.auto 0;
                timeout 120 git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +${{ github.sha }}:refs/remotes/origin/${{ github.ref_name }}
                git checkout --progress --force -B ${{ github.ref_name }} refs/remotes/origin/${{ github.ref_name }}
                if [ "$(git log -1 --format='%H')" == "${{ github.sha }}" ]; then
                  success="yes";
                  break;
                fi
                sleep 15;
              done
  
              if [ $success == "no" ]; then
                exit 1;
              fi
              exit 0;
            '
          done